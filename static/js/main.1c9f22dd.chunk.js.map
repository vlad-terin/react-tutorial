{"version":3,"sources":["Table.js","Form.js","App.js","index.js"],"names":["TableHeader","react_default","a","createElement","TableBody","props","rows","characterData","map","row","index","key","name","job","onClick","removeCharacter","Table","Table_TableHeader","Table_TableBody","Form","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChange","event","_event$target","target","value","setState","defineProperty","onFormSubmit","preventDefault","handleSubmit","state","initialState","_this$state","onSubmit","for","type","id","onChange","Component","App","characters","filter","character","i","concat","toConsumableArray","className","src_Table","src_Form","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.1c9f22dd.chunk.js","sourcesContent":["import React from \"react\";\n\nconst TableHeader = () => {\n  return (\n    <thead>\n      <tr>\n        <th>Name</th>\n        <th>Job</th>\n        <th>Remove</th>\n      </tr>\n    </thead>\n  );\n};\n\n//Here's where that index we defined in the removeCharacter() method comes in. In the TableBody component, we'll pass the key/index through as a parameter, so the filter function knows which item to remove. We'll create a button with an onClick and pass it through.\nconst TableBody = (props) => {\n  const rows = props.characterData.map((row, index) => {\n    //The onClick function must pass through a function that returns the removeCharacter() method, otherwise it will try to run automatically.\n    return (\n      <tr key={index}>\n        <td>{row.name}</td>\n        <td>{row.job}</td>\n        <td>\n          <button onClick={() => props.removeCharacter(index)}>Delete</button>\n        </td>\n      </tr>\n    );\n  });\n\n  return <tbody>{rows}</tbody>;\n};\n\n//Since we're passing removeCharacter down to TableBody from Table, we're going to have to pass it through again as a prop, just like we did with the character data.\n//In addition, since it turns out that the only components having their own states in our project are App and Form, it would be best practice to transform Table into a simple component from the class component it currently is.\nconst Table = (props) => {\n  const { characterData, removeCharacter } = props;\n  return (\n    <table>\n      <TableHeader />\n      <TableBody\n        characterData={characterData}\n        removeCharacter={removeCharacter}\n      />\n    </table>\n  );\n};\n\nexport default Table;\n","import React, { Component } from \"react\";\n\nclass Form extends Component {\n  constructor(props) {\n    super(props);\n\n    this.initialState = {\n      name: \"\",\n      job: \"\",\n    };\n\n    this.state = this.initialState;\n  }\n\n  handleChange = (event) => {\n    const { name, value } = event.target;\n\n    this.setState({\n      [name]: value,\n    });\n  };\n\n  onFormSubmit = (event) => {\n    event.preventDefault();\n\n    this.props.handleSubmit(this.state);\n    this.setState(this.initialState);\n  };\n\n  render() {\n    const { name, job } = this.state;\n\n    return (\n      <form onSubmit={this.onFormSubmit}>\n        <label for=\"name\">Name</label>\n        <input\n          type=\"text\"\n          name=\"name\"\n          id=\"name\"\n          value={name}\n          onChange={this.handleChange}\n        />\n        <label for=\"job\">Job</label>\n        <input\n          type=\"text\"\n          name=\"job\"\n          id=\"job\"\n          value={job}\n          onChange={this.handleChange}\n        />\n        <button type=\"submit\">Submit</button>\n      </form>\n    );\n  }\n}\n\nexport default Form;\n","import React, { Component } from \"react\";\nimport Table from \"./Table\";\nimport Form from \"./Form\";\n\n// state object\nclass App extends Component {\n  state = {\n    //object properties\n    //any data that in the state is called contained in the state\n    //characters have array of objects\n    characters: [],\n  };\n\n  //create \"removeCharacter\" method on the parent App class\n  //after, we have to pass this function through to the component and render a button next to each character\n  removeCharacter = (index) => {\n    //to retrieve the state\n    const { characters } = this.state;\n\n    //this.setState is a built in method for manipulating state\n    //filter method creates a new array, preferred method for modifying arrays\n    this.setState({\n      characters: characters.filter((character, i) => {\n        return i !== index;\n      }),\n    });\n  };\n\n  handleSubmit = (character) => {\n    this.setState({ characters: [...this.state.characters, character] });\n  };\n\n  render() {\n    const { characters } = this.state;\n\n    return (\n      // passing removeCharacter function as a prop to Table\n      <div className=\"container\">\n        <h1>React Tutorial</h1>\n        <p>Add a character with a name and a job to the table.</p>\n        <Table\n          characterData={characters}\n          removeCharacter={this.removeCharacter}\n        />\n        <h3>Add New</h3>\n        <Form handleSubmit={this.handleSubmit} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n"],"sourceRoot":""}